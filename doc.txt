詳解GO

便利コマンド
go test -bench
-race で競合検知

2 context
キャンセル通知など
contextにhttpクライアント情報（IP）などをつめておく。ログに使う。

3 database/sql
標準でコネクションプールする
アプリケーション終了までcloseすればいいd
よく使われるRDB管理のパッケージ

4 可視性とGo
go modules
go getで取得するバージョンの違い

5 go mod
バージョニング方法 gitを使う
go get

6　オブジェクト指向


7 インターフェース
インターフェースのnil値の注意
interfaceは最小限

8 エラーハンドリング
errors.Newとfmt.Errorfの使い分けはverbを使うかどうか
fmt.Errorfでどこでエラーが起きたかをラップしてわかるようにできる
エラーラッピング Is As
独自エラーをIsで判別
何度もif err != nil はGoの仕様と考える
panicは自己回復できないところで使う cssファイルがないなど

9　無名関数、クロージャ
無名関数をゴルーチンとして扱う場合は外部変数などを内部で使わない

10 環境変数の扱い方
環境変数のテスト
t.setenv

11 Goの依存性の注入
インタフェースを後から注入する方法

12 ミドルウェアパターン
複数のハンドラで共通の処理を行いたい場合にミドルウェアを作るといい
ハンドラの前後処理を追加できる
ミドルウェアシグネチャ(interface)を拡張したミドルウェアパターン
リクエストボディをログに残すミドルウェアはバッファにコピーしてから行う


13 ハンズオン go_todo_app_mine
なぜそうするのかを理解する為、テストを書きながら修正を加える
いいコードはテスト可能。テストしにくいコードは書き直しの対象


14
シンプルなサーバーテスト


15
環境変数
github actionsの設定


16
クリーンアーキテクチャー
責務を分ける


17
エンドポイントの追加
ハンドラー作成
テーブルドリブンテスト
クリーンアーキテクチャー


18
データベース設定

マイグレーションツール
Makefile更新
Docker起動

github actionsでもSQLコンテナを起動する
test.yamlに設定追加

sqlxを使う
sqlに対するテストコード
github actionsで実行される



20 JWT Redisを使った認証機能
このルートディレクトリの中身